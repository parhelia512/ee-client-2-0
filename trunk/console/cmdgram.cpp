
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwDATABLOCK	276
#define	rwSWITCH	277
#define	rwCASE	278
#define	rwSWITCHSTR	279
#define	rwCASEOR	280
#define	rwPACKAGE	281
#define	rwNAMESPACE	282
#define	rwCLASS	283
#define	rwASSERT	284
#define	ILLEGAL_TOKEN	285
#define	CHRCONST	286
#define	INTCONST	287
#define	TTAG	288
#define	VAR	289
#define	IDENT	290
#define	TYPE	291
#define	DOCBLOCK	292
#define	STRATOM	293
#define	TAGATOM	294
#define	FLTCONST	295
#define	opINTNAME	296
#define	opINTNAMER	297
#define	opMINUSMINUS	298
#define	opPLUSPLUS	299
#define	STMT_SEP	300
#define	opSHL	301
#define	opSHR	302
#define	opPLASN	303
#define	opMIASN	304
#define	opMLASN	305
#define	opDVASN	306
#define	opMODASN	307
#define	opANDASN	308
#define	opXORASN	309
#define	opORASN	310
#define	opSLASN	311
#define	opSRASN	312
#define	opCAT	313
#define	opEQ	314
#define	opNE	315
#define	opGE	316
#define	opLE	317
#define	opAND	318
#define	opOR	319
#define	opSTREQ	320
#define	opCOLONCOLON	321
#define	opMDASN	322
#define	opNDASN	323
#define	opNTASN	324
#define	opSTRNE	325
#define	UNARY	326

#line 1 "cmdgram.y"


// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

#line 34 "cmdgram.y"

        /* Reserved Word Definitions */
#line 45 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 59 "cmdgram.y"

        /* Operator Definitions */

#line 72 "cmdgram.y"
typedef union {
   char              c;
   int               i;
   const char *      s;
   char *            str;
   double            f;
   StmtNode *        stmt;
   ExprNode *        expr;
   SlotAssignNode *  slist;
   VarNode *         var;
   SlotDecl          slot;
   InternalSlotDecl  intslot;
   ObjectBlockDecl   odcl;
   ObjectDeclNode *  od;
   AssignDecl        asn;
   IfStmtNode *      ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		364
#define	YYFLAG		-32768
#define	YYNTBASE	97

#define YYTRANSLATE(x) ((unsigned)(x) <= 326 ? yytranslate[x] : 135)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,     2,     2,     2,    51,    50,     2,    52,
    53,    43,    41,    54,    42,    48,    44,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    55,    56,    45,
    47,    46,    93,    62,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    89,     2,    96,    59,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    57,    49,    58,    60,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    90,    91,    92,    94,    95
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    41,    44,    47,
    51,    54,    59,    66,    68,    77,    88,    89,    91,    93,
    97,   108,   119,   127,   140,   150,   161,   169,   170,   173,
   174,   176,   177,   180,   181,   183,   185,   188,   191,   195,
   199,   201,   209,   217,   222,   230,   236,   238,   242,   248,
   256,   262,   269,   279,   288,   297,   305,   314,   322,   330,
   337,   339,   341,   345,   349,   353,   357,   361,   365,   369,
   373,   377,   380,   383,   385,   391,   395,   399,   403,   407,
   411,   415,   419,   423,   427,   431,   435,   439,   443,   446,
   449,   451,   453,   455,   457,   459,   461,   463,   465,   467,
   472,   476,   483,   487,   491,   493,   497,   499,   501,   504,
   507,   510,   513,   516,   519,   522,   525,   528,   531,   533,
   535,   537,   541,   548,   551,   557,   560,   564,   570,   575,
   582,   589,   594,   601,   602,   604,   606,   610,   612,   615,
   620,   626,   631,   639,   648,   650
};

static const short yyrhs[] = {    98,
     0,     0,    98,    99,     0,   103,     0,   104,     0,   100,
     0,    26,    35,    57,   101,    58,    56,     0,   104,     0,
   101,   104,     0,     0,   102,   103,     0,   118,     0,   119,
     0,   120,     0,   107,     0,   115,     0,     7,    56,     0,
     9,    56,     0,    13,    56,     0,    13,   122,    56,     0,
   121,    56,     0,    33,    47,   122,    56,     0,    33,    47,
   122,    54,   122,    56,     0,    37,     0,     3,    35,    52,
   105,    53,    57,   102,    58,     0,     3,    35,    88,    35,
    52,   105,    53,    57,   102,    58,     0,     0,   106,     0,
    34,     0,   106,    54,    34,     0,    21,    35,    52,    35,
   109,    53,    57,   132,    58,    56,     0,     5,   125,    52,
   110,   109,   111,    53,    57,   112,    58,     0,     5,   125,
    52,   110,   109,   111,    53,     0,     5,   125,    52,    89,
   110,    96,   109,   111,    53,    57,   112,    58,     0,     5,
   125,    52,    89,   110,    96,   109,   111,    53,     0,     6,
   125,    52,   110,   109,   111,    53,    57,   112,    58,     0,
     6,   125,    52,   110,   109,   111,    53,     0,     0,    55,
    35,     0,     0,   122,     0,     0,    54,   131,     0,     0,
   132,     0,   113,     0,   132,   113,     0,   108,    56,     0,
   113,   108,    56,     0,    57,   102,    58,     0,   103,     0,
    22,    52,   122,    53,    57,   116,    58,     0,    24,    52,
   122,    53,    57,   116,    58,     0,    23,   117,    55,   102,
     0,    23,   117,    55,   102,    19,    55,   102,     0,    23,
   117,    55,   102,   116,     0,   122,     0,   117,    25,   122,
     0,    11,    52,   122,    53,   114,     0,    11,    52,   122,
    53,   114,     8,   114,     0,    14,    52,   122,    53,   114,
     0,    15,   114,    14,    52,   122,    53,     0,    20,    52,
   122,    56,   122,    56,   122,    53,   114,     0,    20,    52,
   122,    56,   122,    56,    53,   114,     0,    20,    52,   122,
    56,    56,   122,    53,   114,     0,    20,    52,   122,    56,
    56,    53,   114,     0,    20,    52,    56,   122,    56,   122,
    53,   114,     0,    20,    52,    56,   122,    56,    53,   114,
     0,    20,    52,    56,    56,   122,    53,   114,     0,    20,
    52,    56,    56,    53,   114,     0,   127,     0,   127,     0,
    52,   122,    53,     0,   122,    59,   122,     0,   122,    51,
   122,     0,   122,    50,   122,     0,   122,    49,   122,     0,
   122,    41,   122,     0,   122,    42,   122,     0,   122,    43,
   122,     0,   122,    44,   122,     0,    42,   122,     0,    43,
   122,     0,    33,     0,   122,    93,   122,    55,   122,     0,
   122,    45,   122,     0,   122,    46,   122,     0,   122,    83,
   122,     0,   122,    84,   122,     0,   122,    81,   122,     0,
   122,    82,   122,     0,   122,    86,   122,     0,   122,    68,
   122,     0,   122,    69,   122,     0,   122,    85,   122,     0,
   122,    87,   122,     0,   122,    94,   122,     0,   122,    62,
   122,     0,    61,   122,     0,    60,   122,     0,    39,     0,
    40,     0,    32,     0,     7,     0,   123,     0,   124,     0,
    35,     0,    38,     0,    34,     0,    34,    89,   134,    96,
     0,   122,    48,    35,     0,   122,    48,    35,    89,   134,
    96,     0,   122,    63,   125,     0,   122,    64,   125,     0,
    35,     0,    52,   122,    53,     0,    66,     0,    65,     0,
    70,   122,     0,    71,   122,     0,    72,   122,     0,    73,
   122,     0,    74,   122,     0,    75,   122,     0,    76,   122,
     0,    77,   122,     0,    78,   122,     0,    79,   122,     0,
   128,     0,   129,     0,   108,     0,    34,    47,   122,     0,
    34,    89,   134,    96,    47,   122,     0,    34,   126,     0,
    34,    89,   134,    96,   126,     0,   123,   126,     0,   123,
    47,   122,     0,   123,    47,    57,   131,    58,     0,    35,
    52,   130,    53,     0,    35,    88,    35,    52,   130,    53,
     0,   122,    48,    35,    52,   130,    53,     0,    29,    52,
   122,    53,     0,    29,    52,   122,    54,    38,    53,     0,
     0,   131,     0,   122,     0,   131,    54,   122,     0,   133,
     0,   132,   133,     0,    35,    47,   122,    56,     0,    36,
    35,    47,   122,    56,     0,    21,    47,   122,    56,     0,
    35,    89,   134,    96,    47,   122,    56,     0,    36,    35,
    89,   134,    96,    47,   122,    56,     0,   122,     0,   134,
    54,   122,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   149,   154,   156,   161,   163,   165,   170,   175,   177,   182,
   184,   189,   190,   191,   192,   193,   194,   196,   198,   200,
   202,   204,   206,   208,   213,   215,   220,   222,   227,   229,
   234,   239,   241,   243,   245,   247,   249,   254,   256,   261,
   263,   268,   270,   275,   277,   279,   281,   286,   288,   293,
   295,   300,   302,   307,   309,   311,   316,   318,   323,   325,
   330,   332,   337,   339,   341,   343,   345,   347,   349,   351,
   356,   361,   363,   365,   367,   369,   371,   373,   375,   377,
   379,   381,   383,   385,   387,   389,   391,   393,   395,   397,
   399,   401,   403,   405,   407,   409,   411,   413,   415,   417,
   419,   421,   423,   425,   427,   429,   431,   433,   435,   437,
   442,   444,   449,   451,   456,   458,   463,   465,   467,   469,
   471,   473,   475,   477,   479,   481,   483,   485,   490,   492,
   494,   496,   498,   500,   502,   504,   506,   508,   513,   515,
   517,   522,   524,   529,   531,   536,   538,   543,   545,   550,
   552,   554,   556,   558,   563,   565
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwDATABLOCK","rwSWITCH","rwCASE","rwSWITCHSTR",
"rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS","rwASSERT","ILLEGAL_TOKEN","CHRCONST",
"INTCONST","TTAG","VAR","IDENT","TYPE","DOCBLOCK","STRATOM","TAGATOM","FLTCONST",
"'+'","'-'","'*'","'/'","'<'","'>'","'='","'.'","'|'","'&'","'%'","'('","')'",
"','","':'","';'","'{'","'}'","'^'","'~'","'!'","'@'","opINTNAME","opINTNAMER",
"opMINUSMINUS","opPLUSPLUS","STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN",
"opDVASN","opMODASN","opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT",
"opEQ","opNE","opGE","opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN",
"opNDASN","opNTASN","'?'","opSTRNE","UNARY","']'","start","decl_list","decl",
"package_decl","fn_decl_list","statement_list","stmt","fn_decl_stmt","var_list_decl",
"var_list","datablock_decl","object_decl","parent_block","object_name","object_args",
"object_declare_block","object_decl_list","stmt_block","switch_stmt","case_block",
"case_expr","if_stmt","while_stmt","for_stmt","expression_stmt","expr","slot_acc",
"intslot_acc","class_name_expr","assign_op_struct","stmt_expr","funcall_expr",
"assert_expr","expr_list_decl","expr_list","slot_assign_list","slot_assign",
"aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
    97,    98,    98,    99,    99,    99,   100,   101,   101,   102,
   102,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   104,   104,   105,   105,   106,   106,
   107,   108,   108,   108,   108,   108,   108,   109,   109,   110,
   110,   111,   111,   112,   112,   112,   112,   113,   113,   114,
   114,   115,   115,   116,   116,   116,   117,   117,   118,   118,
   119,   119,   120,   120,   120,   120,   120,   120,   120,   120,
   121,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   123,   123,   124,   124,   125,   125,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
   128,   129,   129,   130,   130,   131,   131,   132,   132,   133,
   133,   133,   133,   133,   134,   134
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     2,     2,     2,     3,
     2,     4,     6,     1,     8,    10,     0,     1,     1,     3,
    10,    10,     7,    12,     9,    10,     7,     0,     2,     0,
     1,     0,     2,     0,     1,     1,     2,     2,     3,     3,
     1,     7,     7,     4,     7,     5,     1,     3,     5,     7,
     5,     6,     9,     8,     8,     7,     8,     7,     7,     6,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     2,     2,     1,     5,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
     3,     6,     3,     3,     1,     3,     1,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     1,     3,     6,     2,     5,     2,     3,     5,     4,     6,
     6,     4,     6,     0,     1,     1,     3,     1,     2,     4,
     5,     4,     7,     8,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   104,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   103,    84,   109,   107,
    24,   108,   101,   102,     0,     0,     0,     0,     0,     3,
     6,     4,     5,    15,   131,    16,    12,    13,    14,     0,
     0,   105,   106,    72,   129,   130,     0,   115,     0,     0,
     0,    17,    18,     0,   104,    84,    19,     0,    72,     0,
    10,    51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   118,   117,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   134,   144,     0,    82,    83,     0,
   100,    99,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
    27,     0,     0,    40,    40,     0,    20,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   132,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   155,
     0,   146,     0,   145,     0,    73,    78,    79,    80,    81,
    86,    87,   111,    77,    76,    75,    74,    98,   113,   114,
    93,    94,    90,    91,    88,    89,    95,    92,    96,     0,
    97,     0,   137,    29,     0,    28,     0,   116,    40,    38,
    41,    38,     0,     0,    50,    11,     0,     0,     0,     0,
    38,     0,     0,     0,     8,   142,     0,     0,    22,     0,
   110,   139,     0,   144,   144,     0,     0,     0,     0,     0,
    27,     0,     0,    42,    42,    59,    61,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     9,     0,     0,
   156,     0,   135,   147,     0,     0,     0,    85,   138,    10,
    30,     0,    38,    39,     0,     0,     0,     0,    62,    70,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     7,   143,    23,   133,   140,   141,   112,     0,     0,    42,
    43,    33,    37,    60,    69,    68,     0,    66,     0,     0,
     0,     0,     0,    57,    52,    53,    25,    10,     0,    44,
    44,    67,    65,    64,     0,     0,     0,     0,     0,   148,
     0,    10,     0,    35,     0,     0,    46,    45,     0,    63,
     0,     0,     0,     0,     0,   149,    58,    54,    26,    44,
    48,    32,     0,    47,    36,     0,     0,     0,     0,     0,
    31,     0,    56,     0,    49,   152,   150,     0,     0,     0,
    10,    34,     0,   151,     0,    55,     0,     0,   153,     0,
   154,     0,     0,     0
};

static const short yydefgoto[] = {   362,
     1,    30,    31,   204,   129,    62,    33,   185,   186,    34,
    35,   224,   190,   256,   316,   317,    63,    36,   269,   293,
    37,    38,    39,    40,    41,    42,    43,    50,    85,    59,
    45,    46,   153,   154,   318,   310,   151
};

static const short yypact[] = {-32768,
   391,   -11,    -3,    -3,   -20,    21,    28,   699,    32,   477,
    35,    -4,    36,    38,    57,    43,-32768,    51,  2526,   -33,
-32768,-32768,-32768,-32768,   972,   972,   972,   972,   972,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    46,
  2273,  2546,-32768,    70,-32768,-32768,     1,-32768,   972,    53,
    78,-32768,-32768,   972,-32768,-32768,-32768,  1085,-32768,   972,
-32768,-32768,   123,   738,    92,   972,   972,   100,   972,   972,
   972,-32768,-32768,   972,   972,   972,   972,   972,   972,   972,
   972,   972,   972,   972,-32768,   972,   125,   -25,   -25,  1139,
   -25,   -25,-32768,   972,   972,   972,   972,   972,   972,   134,
   972,   972,   972,   972,   972,    -3,    -3,   972,   972,   972,
   972,   972,   972,   972,   972,   972,   972,   972,   172,-32768,
   133,   146,  1193,   302,   972,  1247,-32768,  1301,   534,   130,
   777,  1355,   152,  1409,  1463,   191,   977,  1031,  2273,  2273,
  2273,  2273,  2273,  2273,  2273,  2273,  2273,  2273,  2273,  2273,
   -44,  2273,   144,   145,   148,-32768,   132,   132,   -25,   -25,
   122,   122,    -8,  2414,  2472,   -25,  2443,  2600,-32768,-32768,
   179,   179,  2501,  2501,   122,   122,  2385,  2356,  2600,  1517,
  2600,   972,  2273,-32768,   155,   159,   165,-32768,   972,   143,
  2273,   143,   477,   477,-32768,-32768,   972,     8,  1571,   816,
   143,   161,   168,    15,-32768,-32768,   193,   972,-32768,   972,
  2561,-32768,   972,   972,   972,   972,   972,   -24,   182,   202,
   133,   150,   205,   187,   187,   236,-32768,  1625,   477,  1679,
   855,   894,  1733,   195,   226,   226,   199,-32768,   203,  1787,
  2273,   972,-32768,  2273,   206,   209,   -42,  2327,-32768,-32768,
-32768,   211,   143,-32768,   972,   212,   213,   477,-32768,-32768,
   477,   477,  1841,   477,  1895,   933,   201,   972,   214,   216,
-32768,-32768,-32768,  2273,-32768,-32768,-32768,   576,   218,   187,
   145,   219,   223,-32768,-32768,-32768,   477,-32768,   477,   477,
  1949,    58,     2,  2273,-32768,-32768,-32768,-32768,   228,   153,
   153,-32768,-32768,-32768,   477,   235,   -31,   248,    64,-32768,
   972,-32768,   618,   227,   229,   232,    23,   153,   233,-32768,
   972,   972,   972,   -30,   231,-32768,  2273,   435,-32768,   153,
-32768,-32768,   237,    23,-32768,  2003,  2057,   -29,   972,   972,
-32768,   239,-32768,   242,-32768,-32768,-32768,   250,  2111,   -21,
-32768,-32768,   972,-32768,   254,   660,  2165,   972,-32768,  2219,
-32768,   295,   306,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -242,     0,  -130,    81,-32768,-32768,
    49,  -181,  -118,  -204,  -158,    -7,     9,-32768,  -232,-32768,
-32768,-32768,-32768,-32768,    37,-32768,-32768,    18,   -40,    -1,
-32768,-32768,  -132,  -177,    24,  -283,  -213
};


#define	YYLAST		2669


static const short yytable[] = {    44,
    32,   120,   247,   270,   218,   205,   192,   278,    44,   210,
   225,   210,     3,     4,    55,   322,   339,     2,    86,   234,
   257,    51,   100,    47,   210,   326,   311,     3,     4,   213,
    65,    48,   210,   249,   326,    52,    16,   106,   107,    17,
    56,    19,    20,   215,    58,    22,    23,    24,    49,    25,
    26,   211,   121,   277,    87,   313,   312,   323,   340,    27,
   229,    88,    89,    90,    91,    92,   348,    28,    29,   328,
   222,   280,   237,   238,   355,   299,    53,   281,   306,    54,
   216,   245,   246,    60,   306,   123,    64,    66,   122,    67,
   126,    68,   307,   308,    69,   343,   128,    70,   307,   308,
   132,    93,   134,   135,   124,   137,   138,   139,   356,   338,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   325,   152,   169,   170,   -71,   350,    44,   196,   125,
   157,   158,   159,   160,   161,   162,   130,   164,   165,   166,
   167,   168,   319,   133,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   183,   136,     3,     4,   155,
   191,   191,    94,    95,    96,    97,   184,   199,   163,   100,
   243,   344,   103,   306,    96,    97,     3,     4,    55,   100,
   187,   197,   103,   105,   106,   107,   201,   307,   308,   108,
   109,    44,    44,     2,   106,   107,   212,   223,   213,   214,
    16,   226,   227,    17,    56,    19,    20,   219,   116,    22,
    23,    24,   220,    25,    26,   118,   221,   235,   152,    94,
    95,    96,    97,    27,   236,   191,   100,    44,   182,   103,
   239,    28,    29,   228,   230,   251,   233,   260,   250,   254,
   255,   106,   107,   258,   240,   253,   241,   267,   268,   244,
   152,   152,   150,   248,   271,   272,    44,   292,   275,    44,
    44,   276,    44,   279,   282,   283,   284,   263,   265,   285,
   286,   295,   288,   296,   298,   300,    44,   196,   274,   301,
   314,   321,   324,   330,   331,    44,   341,    44,    44,   332,
   335,   152,   345,   351,   363,   302,   353,   303,   304,   352,
   358,   252,   291,    44,   294,   364,     3,     4,    55,     0,
   334,    44,   196,   320,     0,   309,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    44,   196,     0,     0,
    16,     0,     0,    17,    56,    19,    20,     0,     0,    22,
    23,    24,     0,    25,    26,     0,     0,   327,   315,   315,
     0,     0,     0,    27,    44,   196,     0,   336,   337,   150,
     0,    28,    29,     0,     0,   333,   315,     0,     0,     0,
     0,     0,     0,     0,     0,   349,   150,     0,   315,     0,
     0,     0,   333,     0,     0,     0,     0,     0,     0,   357,
   189,     0,     0,     2,   360,     3,     4,     5,     0,     6,
     0,     7,     0,     8,     9,    10,     0,     0,     0,     0,
    11,    12,    13,     0,    14,     0,    15,     0,     0,    16,
     0,     0,    17,    18,    19,    20,     0,    21,    22,    23,
    24,     0,    25,    26,     0,     0,     0,     0,     0,     3,
     4,     5,    27,     6,     0,     7,     0,     8,     9,    10,
    28,    29,     0,   342,    11,    12,    13,   268,    14,     0,
     0,     0,     0,    16,     0,     0,    17,    18,    19,    20,
     0,    21,    22,    23,    24,     0,    25,    26,     0,     0,
     0,     3,     4,     5,     0,     6,    27,     7,     0,     8,
     9,    10,     0,     0,    28,    29,    11,    12,    13,     0,
    14,     0,     0,     0,     0,    16,     0,     0,    17,    18,
    19,    20,     0,    21,    22,    23,    24,     0,    25,    26,
     0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,    61,     0,     0,    28,    29,     3,     4,
     5,     0,     6,     0,     7,     0,     8,     9,    10,     0,
     0,     0,     0,    11,    12,    13,     0,    14,     0,     0,
     0,     0,    16,     0,     0,    17,    18,    19,    20,     0,
    21,    22,    23,    24,     0,    25,    26,     0,     0,     0,
     3,     4,     5,     0,     6,    27,     7,     0,     8,     9,
    10,   195,     0,    28,    29,    11,    12,    13,     0,    14,
     0,     0,     0,     0,    16,     0,     0,    17,    18,    19,
    20,     0,    21,    22,    23,    24,     0,    25,    26,     0,
     0,     0,     3,     4,     5,     0,     6,    27,     7,     0,
     8,     9,    10,   297,     0,    28,    29,    11,    12,    13,
     0,    14,     0,     0,     0,     0,    16,     0,     0,    17,
    18,    19,    20,     0,    21,    22,    23,    24,     0,    25,
    26,     0,     0,     0,     3,     4,     5,     0,     6,    27,
     7,     0,     8,     9,    10,   329,     0,    28,    29,    11,
    12,    13,     0,    14,     0,     0,     0,     0,    16,     0,
     0,    17,    18,    19,    20,     0,    21,    22,    23,    24,
     0,    25,    26,     3,     4,    55,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
    29,     0,     0,     0,     0,     0,     0,    16,     0,     0,
    17,    56,    19,    20,     0,     0,    22,    23,    24,     0,
    25,    26,     3,     4,    55,     0,     0,     0,     0,     0,
    27,     0,     0,     0,    57,     0,     0,     0,    28,    29,
     0,     0,     0,     0,     0,     0,    16,     0,     0,    17,
    56,    19,    20,     0,     0,    22,    23,    24,     0,    25,
    26,     3,     4,    55,     0,     0,     0,     0,     0,    27,
     0,     0,     0,   131,     0,     0,     0,    28,    29,     0,
     0,     0,     0,     0,     0,    16,     0,     0,    17,    56,
    19,    20,     0,     0,    22,    23,    24,     0,    25,    26,
     3,     4,    55,     0,     0,     0,     0,     0,    27,     0,
     0,     0,   198,     0,     0,     0,    28,    29,     0,     0,
     0,     0,     0,     0,    16,     0,     0,    17,    56,    19,
    20,     0,     0,    22,    23,    24,     0,    25,    26,     3,
     4,    55,     0,     0,     0,     0,     0,    27,     0,     0,
     0,   232,     0,     0,     0,    28,    29,     0,     0,     0,
     0,     0,     0,    16,     0,     0,    17,    56,    19,    20,
     0,     0,    22,    23,    24,     0,    25,    26,     3,     4,
    55,     0,     0,     0,     0,     0,    27,   262,     0,     0,
     0,     0,     0,     0,    28,    29,     0,     0,     0,     0,
     0,     0,    16,     0,     0,    17,    56,    19,    20,     0,
     0,    22,    23,    24,     0,    25,    26,     3,     4,    55,
     0,     0,     0,     0,     0,    27,   264,     0,     0,     0,
     0,     0,     0,    28,    29,     0,     0,     0,     0,     0,
     0,    16,     0,     0,    17,    56,    19,    20,     0,     0,
    22,    23,    24,     0,    25,    26,     3,     4,    55,     0,
     0,     0,     0,     0,    27,   290,     0,     0,     0,     0,
     0,     0,    28,    29,     0,     0,     0,     0,     0,     0,
    16,     0,     0,    17,    56,    19,    20,     0,     0,    22,
    23,    24,     0,    25,    26,     0,     0,    94,    95,    96,
    97,    98,    99,    27,   100,   101,   102,   103,     0,   206,
   207,    28,    29,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,     0,     0,     0,   117,
   118,    94,    95,    96,    97,    98,    99,     0,   100,   101,
   102,   103,     0,     0,   208,     0,   209,     0,     0,   104,
     0,     0,   105,   106,   107,     0,     0,     0,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   110,   111,   112,   113,   114,   115,   116,     0,     0,
     0,     0,     0,   117,   118,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,     0,     0,     0,     0,
   127,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
   115,   116,     0,     0,     0,     0,     0,   117,   118,    94,
    95,    96,    97,    98,    99,     0,   100,   101,   102,   103,
     0,   156,     0,     0,     0,     0,     0,   104,     0,     0,
   105,   106,   107,     0,     0,     0,   108,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,     0,     0,
     0,   117,   118,    94,    95,    96,    97,    98,    99,     0,
   100,   101,   102,   103,     0,   188,     0,     0,     0,     0,
     0,   104,     0,     0,   105,   106,   107,     0,     0,     0,
   108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,   117,   118,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,     0,   193,
     0,     0,     0,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,     0,     0,     0,   117,
   118,    94,    95,    96,    97,    98,    99,     0,   100,   101,
   102,   103,     0,   194,     0,     0,     0,     0,     0,   104,
     0,     0,   105,   106,   107,     0,     0,     0,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   110,   111,   112,   113,   114,   115,   116,     0,     0,
     0,     0,     0,   117,   118,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,     0,     0,     0,     0,
   200,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
   115,   116,     0,     0,     0,     0,     0,   117,   118,    94,
    95,    96,    97,    98,    99,     0,   100,   101,   102,   103,
     0,   202,     0,     0,     0,     0,     0,   104,     0,     0,
   105,   106,   107,     0,     0,     0,   108,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,     0,     0,
     0,   117,   118,    94,    95,    96,    97,    98,    99,     0,
   100,   101,   102,   103,     0,   203,     0,     0,     0,     0,
     0,   104,     0,     0,   105,   106,   107,     0,     0,     0,
   108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,   117,   118,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,     0,     0,
     0,   217,     0,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,     0,     0,     0,   117,
   118,    94,    95,    96,    97,    98,    99,     0,   100,   101,
   102,   103,     0,     0,     0,     0,   231,     0,     0,   104,
     0,     0,   105,   106,   107,     0,     0,     0,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   110,   111,   112,   113,   114,   115,   116,     0,     0,
     0,     0,     0,   117,   118,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,     0,   259,     0,     0,
     0,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
   115,   116,     0,     0,     0,     0,     0,   117,   118,    94,
    95,    96,    97,    98,    99,     0,   100,   101,   102,   103,
     0,   261,     0,     0,     0,     0,     0,   104,     0,     0,
   105,   106,   107,     0,     0,     0,   108,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,     0,     0,
     0,   117,   118,    94,    95,    96,    97,    98,    99,     0,
   100,   101,   102,   103,     0,     0,     0,     0,   266,     0,
     0,   104,     0,     0,   105,   106,   107,     0,     0,     0,
   108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,   117,   118,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,     0,     0,
     0,     0,   273,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,     0,     0,     0,   117,
   118,    94,    95,    96,    97,    98,    99,     0,   100,   101,
   102,   103,     0,   287,     0,     0,     0,     0,     0,   104,
     0,     0,   105,   106,   107,     0,     0,     0,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   110,   111,   112,   113,   114,   115,   116,     0,     0,
     0,     0,     0,   117,   118,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,     0,   289,     0,     0,
     0,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
   115,   116,     0,     0,     0,     0,     0,   117,   118,    94,
    95,    96,    97,    98,    99,     0,   100,   101,   102,   103,
     0,   305,     0,     0,     0,     0,     0,   104,     0,     0,
   105,   106,   107,     0,     0,     0,   108,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,     0,     0,
     0,   117,   118,    94,    95,    96,    97,    98,    99,     0,
   100,   101,   102,   103,     0,     0,     0,     0,   346,     0,
     0,   104,     0,     0,   105,   106,   107,     0,     0,     0,
   108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,   117,   118,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,     0,     0,
     0,     0,   347,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   110,   111,   112,
   113,   114,   115,   116,     0,     0,     0,     0,     0,   117,
   118,    94,    95,    96,    97,    98,    99,     0,   100,   101,
   102,   103,     0,     0,     0,     0,   354,     0,     0,   104,
     0,     0,   105,   106,   107,     0,     0,     0,   108,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   110,   111,   112,   113,   114,   115,   116,     0,     0,
     0,     0,     0,   117,   118,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,     0,     0,     0,     0,
   359,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   110,   111,   112,   113,   114,
   115,   116,     0,     0,     0,     0,     0,   117,   118,    94,
    95,    96,    97,    98,    99,     0,   100,   101,   102,   103,
     0,     0,     0,     0,   361,     0,     0,   104,     0,     0,
   105,   106,   107,     0,     0,     0,   108,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   111,   112,   113,   114,   115,   116,     0,     0,     0,     0,
     0,   117,   118,    94,    95,    96,    97,    98,    99,     0,
   100,   101,   102,   103,     0,     0,     0,     0,     0,     0,
     0,   104,     0,     0,   105,   106,   107,     0,     0,     0,
   108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,   111,   112,   113,   114,   115,   116,
     0,     0,     0,     0,     0,   117,   118,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,     0,     0,
     0,     0,     0,     0,     0,   104,     0,     0,   105,   106,
   107,     0,     0,     0,   108,   109,    94,    95,    96,    97,
    98,    99,     0,   100,   101,   102,   103,   110,   111,   112,
   113,   114,   115,   116,   104,     0,     0,   105,   106,   107,
   118,     0,     0,   108,   109,    94,    95,    96,    97,    98,
    99,     0,   100,   101,   102,   103,   110,   111,   112,   113,
   114,     0,   116,   104,     0,     0,   105,   106,   107,   118,
     0,     0,   108,   109,    94,    95,    96,    97,    98,    99,
     0,   100,     0,   102,   103,   110,   111,   112,   113,     0,
     0,   116,   104,     0,     0,   105,   106,   107,   118,     0,
     0,   108,   109,    94,    95,    96,    97,    98,    99,     0,
   100,     0,   102,   103,   110,   111,   112,   113,     0,     0,
   116,     0,     0,     0,   105,   106,   107,   118,     0,     0,
   108,   109,    94,    95,    96,    97,    98,    99,     0,   100,
     0,     0,   103,   110,   111,   112,   113,     0,     0,   116,
     0,     0,     0,   105,   106,   107,   118,     0,     0,   108,
   109,    94,    95,    96,    97,    98,    99,     0,   100,     0,
     0,   103,   110,   111,   112,   113,     0,     0,   116,     0,
     0,     0,   105,   106,   107,   118,     0,     0,   108,   109,
     0,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   112,   113,     0,     0,   116,     0,     0,
    72,    73,   119,     0,   118,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,     0,     0,   242,     0,     0,
    72,    73,     0,     0,    84,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    72,    73,     0,     0,     0,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    94,    95,    96,    97,     0,     0,     0,   100,     0,     0,
   103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   107,     0,     0,     0,   108,   109
};

static const short yycheck[] = {     1,
     1,    42,   216,   236,   182,   136,   125,   250,    10,    54,
   192,    54,     5,     6,     7,    47,    47,     3,    52,   201,
   225,     4,    48,    35,    54,   309,    25,     5,     6,    54,
    35,    35,    54,    58,   318,    56,    29,    63,    64,    32,
    33,    34,    35,    52,     8,    38,    39,    40,    52,    42,
    43,    96,    52,    96,    88,   298,    55,    89,    89,    52,
    53,    25,    26,    27,    28,    29,    96,    60,    61,   312,
   189,   253,    58,   204,    96,   280,    56,   255,    21,    52,
    89,   214,   215,    52,    21,    49,    52,    52,    88,    52,
    54,    35,    35,    36,    52,   328,    60,    47,    35,    36,
    64,    56,    66,    67,    52,    69,    70,    71,   351,   323,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    58,    86,   106,   107,    56,   340,   129,   129,    52,
    94,    95,    96,    97,    98,    99,    14,   101,   102,   103,
   104,   105,   301,    52,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,    57,     5,     6,    35,
   124,   125,    41,    42,    43,    44,    34,   131,    35,    48,
   211,   330,    51,    21,    43,    44,     5,     6,     7,    48,
    35,    52,    51,    62,    63,    64,    35,    35,    36,    68,
    69,   193,   194,     3,    63,    64,    53,    55,    54,    52,
    29,   193,   194,    32,    33,    34,    35,    53,    87,    38,
    39,    40,    54,    42,    43,    94,    52,    57,   182,    41,
    42,    43,    44,    52,    57,   189,    48,   229,    57,    51,
    38,    60,    61,   197,   198,    34,   200,   229,    57,    35,
    54,    63,    64,     8,   208,    96,   210,    53,    23,   213,
   214,   215,   216,   217,    56,    53,   258,    57,    53,   261,
   262,    53,   264,    53,    53,    53,   258,   231,   232,   261,
   262,    58,   264,    58,    57,    57,   278,   278,   242,    57,
    53,    47,    35,    57,    56,   287,    56,   289,   290,    58,
    58,   255,    56,    55,     0,   287,    47,   289,   290,    58,
    47,   221,   266,   305,   268,     0,     5,     6,     7,    -1,
   318,   313,   313,   305,    -1,   292,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   328,   328,    -1,    -1,
    29,    -1,    -1,    32,    33,    34,    35,    -1,    -1,    38,
    39,    40,    -1,    42,    43,    -1,    -1,   311,   300,   301,
    -1,    -1,    -1,    52,   356,   356,    -1,   321,   322,   323,
    -1,    60,    61,    -1,    -1,   317,   318,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   339,   340,    -1,   330,    -1,
    -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1,   353,
    89,    -1,    -1,     3,   358,     5,     6,     7,    -1,     9,
    -1,    11,    -1,    13,    14,    15,    -1,    -1,    -1,    -1,
    20,    21,    22,    -1,    24,    -1,    26,    -1,    -1,    29,
    -1,    -1,    32,    33,    34,    35,    -1,    37,    38,    39,
    40,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,     5,
     6,     7,    52,     9,    -1,    11,    -1,    13,    14,    15,
    60,    61,    -1,    19,    20,    21,    22,    23,    24,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    34,    35,
    -1,    37,    38,    39,    40,    -1,    42,    43,    -1,    -1,
    -1,     5,     6,     7,    -1,     9,    52,    11,    -1,    13,
    14,    15,    -1,    -1,    60,    61,    20,    21,    22,    -1,
    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,
    34,    35,    -1,    37,    38,    39,    40,    -1,    42,    43,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    -1,    57,    -1,    -1,    60,    61,     5,     6,
     7,    -1,     9,    -1,    11,    -1,    13,    14,    15,    -1,
    -1,    -1,    -1,    20,    21,    22,    -1,    24,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    32,    33,    34,    35,    -1,
    37,    38,    39,    40,    -1,    42,    43,    -1,    -1,    -1,
     5,     6,     7,    -1,     9,    52,    11,    -1,    13,    14,
    15,    58,    -1,    60,    61,    20,    21,    22,    -1,    24,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    34,
    35,    -1,    37,    38,    39,    40,    -1,    42,    43,    -1,
    -1,    -1,     5,     6,     7,    -1,     9,    52,    11,    -1,
    13,    14,    15,    58,    -1,    60,    61,    20,    21,    22,
    -1,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,
    33,    34,    35,    -1,    37,    38,    39,    40,    -1,    42,
    43,    -1,    -1,    -1,     5,     6,     7,    -1,     9,    52,
    11,    -1,    13,    14,    15,    58,    -1,    60,    61,    20,
    21,    22,    -1,    24,    -1,    -1,    -1,    -1,    29,    -1,
    -1,    32,    33,    34,    35,    -1,    37,    38,    39,    40,
    -1,    42,    43,     5,     6,     7,    -1,    -1,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    61,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,
    32,    33,    34,    35,    -1,    -1,    38,    39,    40,    -1,
    42,    43,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,
    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,
    33,    34,    35,    -1,    -1,    38,    39,    40,    -1,    42,
    43,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,
    -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,
    34,    35,    -1,    -1,    38,    39,    40,    -1,    42,    43,
     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,
    -1,    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    34,
    35,    -1,    -1,    38,    39,    40,    -1,    42,    43,     5,
     6,     7,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
    -1,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    29,    -1,    -1,    32,    33,    34,    35,
    -1,    -1,    38,    39,    40,    -1,    42,    43,     5,     6,
     7,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    -1,
    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,
    -1,    -1,    29,    -1,    -1,    32,    33,    34,    35,    -1,
    -1,    38,    39,    40,    -1,    42,    43,     5,     6,     7,
    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
    -1,    29,    -1,    -1,    32,    33,    34,    35,    -1,    -1,
    38,    39,    40,    -1,    42,    43,     5,     6,     7,    -1,
    -1,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,
    29,    -1,    -1,    32,    33,    34,    35,    -1,    -1,    38,
    39,    40,    -1,    42,    43,    -1,    -1,    41,    42,    43,
    44,    45,    46,    52,    48,    49,    50,    51,    -1,    53,
    54,    60,    61,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    94,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    -1,    54,    -1,    56,    -1,    -1,    59,
    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
    -1,    -1,    -1,    93,    94,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    94,    41,    42,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    53,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    -1,    53,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    94,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
    -1,    -1,    -1,    93,    94,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    94,    41,    42,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    53,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    -1,    -1,
    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    94,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    -1,    -1,    -1,    56,    -1,    -1,    59,
    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
    -1,    -1,    -1,    93,    94,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    53,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    94,    41,    42,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    59,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    -1,    -1,
    -1,    -1,    56,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    94,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
    -1,    -1,    -1,    93,    94,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    53,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    94,    41,    42,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    59,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    -1,    -1,
    -1,    -1,    56,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    94,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    -1,    -1,    -1,    56,    -1,    -1,    59,
    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
    -1,    -1,    -1,    93,    94,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    -1,    -1,    -1,    56,    -1,    -1,    59,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    94,    41,    42,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    63,
    64,    -1,    -1,    -1,    68,    69,    41,    42,    43,    44,
    45,    46,    -1,    48,    49,    50,    51,    81,    82,    83,
    84,    85,    86,    87,    59,    -1,    -1,    62,    63,    64,
    94,    -1,    -1,    68,    69,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    81,    82,    83,    84,
    85,    -1,    87,    59,    -1,    -1,    62,    63,    64,    94,
    -1,    -1,    68,    69,    41,    42,    43,    44,    45,    46,
    -1,    48,    -1,    50,    51,    81,    82,    83,    84,    -1,
    -1,    87,    59,    -1,    -1,    62,    63,    64,    94,    -1,
    -1,    68,    69,    41,    42,    43,    44,    45,    46,    -1,
    48,    -1,    50,    51,    81,    82,    83,    84,    -1,    -1,
    87,    -1,    -1,    -1,    62,    63,    64,    94,    -1,    -1,
    68,    69,    41,    42,    43,    44,    45,    46,    -1,    48,
    -1,    -1,    51,    81,    82,    83,    84,    -1,    -1,    87,
    -1,    -1,    -1,    62,    63,    64,    94,    -1,    -1,    68,
    69,    41,    42,    43,    44,    45,    46,    -1,    48,    -1,
    -1,    51,    81,    82,    83,    84,    -1,    -1,    87,    -1,
    -1,    -1,    62,    63,    64,    94,    -1,    -1,    68,    69,
    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    83,    84,    -1,    -1,    87,    -1,    -1,
    65,    66,    47,    -1,    94,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    -1,    -1,    47,    -1,    -1,
    65,    66,    -1,    -1,    89,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    65,    66,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    41,    42,    43,    44,    -1,    -1,    -1,    48,    -1,    -1,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    63,    64,    -1,    -1,    -1,    68,    69
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 150 "cmdgram.y"
{ ;
    break;}
case 2:
#line 155 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 157 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 162 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 164 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 166 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 171 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s); ;
    break;}
case 8:
#line 176 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 178 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 183 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 185 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 17:
#line 195 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc(); ;
    break;}
case 18:
#line 197 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc(); ;
    break;}
case 19:
#line 199 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(NULL); ;
    break;}
case 20:
#line 201 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(yyvsp[-1].expr); ;
    break;}
case 21:
#line 203 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 22:
#line 205 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-3].s, yyvsp[-1].expr, NULL); ;
    break;}
case 23:
#line 207 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 24:
#line 209 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc(yyvsp[0].str, false, true); ;
    break;}
case 25:
#line 214 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, NULL, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 26:
#line 216 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, yyvsp[-8].s, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 27:
#line 221 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 28:
#line 223 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 29:
#line 228 "cmdgram.y"
{ yyval.var = VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 30:
#line 230 "cmdgram.y"
{ yyval.var = yyvsp[-2].var; ((StmtNode*)(yyvsp[-2].var))->append((StmtNode*)VarNode::alloc(yyvsp[0].s, NULL)); ;
    break;}
case 31:
#line 235 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc(ConstantNode::alloc(yyvsp[-8].s), ConstantNode::alloc(yyvsp[-6].s), NULL, yyvsp[-5].s, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 32:
#line 240 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 33:
#line 242 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, false, false); ;
    break;}
case 34:
#line 244 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 35:
#line 246 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, true, false); ;
    break;}
case 36:
#line 248 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 37:
#line 250 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, false, true); ;
    break;}
case 38:
#line 255 "cmdgram.y"
{ yyval.s = NULL; ;
    break;}
case 39:
#line 257 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 40:
#line 262 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc("", false); ;
    break;}
case 41:
#line 264 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 42:
#line 269 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 43:
#line 271 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 44:
#line 276 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 45:
#line 278 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 46:
#line 280 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 47:
#line 282 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 48:
#line 287 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 49:
#line 289 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 50:
#line 294 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 51:
#line 296 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 52:
#line 301 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 53:
#line 303 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 54:
#line 308 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-3].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 55:
#line 310 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 56:
#line 312 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 57:
#line 317 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 58:
#line 319 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 59:
#line 324 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 60:
#line 326 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 61:
#line 331 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 62:
#line 333 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 63:
#line 338 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 340 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 65:
#line 342 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 344 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 346 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 348 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 350 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 352 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 357 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 72:
#line 362 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 73:
#line 364 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 74:
#line 366 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 75:
#line 368 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 76:
#line 370 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 77:
#line 372 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 78:
#line 374 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 79:
#line 376 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 80:
#line 378 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 380 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 382 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 83:
#line 384 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc(yyvsp[0].expr); ;
    break;}
case 84:
#line 386 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc(yyvsp[0].s); ;
    break;}
case 85:
#line 388 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc(yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 390 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 392 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 394 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 396 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 398 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 400 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 402 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 404 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 406 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 408 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 410 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 97:
#line 412 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 98:
#line 414 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i); ;
    break;}
case 99:
#line 416 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 100:
#line 418 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 101:
#line 420 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, true); ;
    break;}
case 102:
#line 422 "cmdgram.y"
{ yyval.expr = FloatNode::alloc(yyvsp[0].f); ;
    break;}
case 103:
#line 424 "cmdgram.y"
{ yyval.expr = IntNode::alloc(yyvsp[0].i); ;
    break;}
case 104:
#line 426 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(StringTable->insert("break")); ;
    break;}
case 105:
#line 428 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc(yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName); ;
    break;}
case 106:
#line 430 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc(yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 107:
#line 432 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 108:
#line 434 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, false); ;
    break;}
case 109:
#line 436 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 110:
#line 438 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 111:
#line 443 "cmdgram.y"
{ yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s; yyval.slot.array = NULL; ;
    break;}
case 112:
#line 445 "cmdgram.y"
{ yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 113:
#line 450 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 114:
#line 452 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 115:
#line 457 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 116:
#line 459 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 117:
#line 464 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 118:
#line 466 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 119:
#line 468 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 120:
#line 470 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 121:
#line 472 "cmdgram.y"
{ yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 122:
#line 474 "cmdgram.y"
{ yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 123:
#line 476 "cmdgram.y"
{ yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 124:
#line 478 "cmdgram.y"
{ yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 125:
#line 480 "cmdgram.y"
{ yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 126:
#line 482 "cmdgram.y"
{ yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 484 "cmdgram.y"
{ yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 486 "cmdgram.y"
{ yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 491 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 493 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 495 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 132:
#line 497 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-2].s, NULL, yyvsp[0].expr); ;
    break;}
case 133:
#line 499 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 134:
#line 501 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-1].s, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 135:
#line 503 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-4].s, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 136:
#line 505 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc(yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 137:
#line 507 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 138:
#line 509 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 139:
#line 514 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-1].expr, false); ;
    break;}
case 140:
#line 516 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, yyvsp[-5].s, yyvsp[-1].expr, false); ;
    break;}
case 141:
#line 518 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-5].expr, true); ;
    break;}
case 142:
#line 523 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-1].expr, NULL ); ;
    break;}
case 143:
#line 525 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].expr, yyvsp[-1].str ); ;
    break;}
case 144:
#line 530 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 145:
#line 532 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 146:
#line 537 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 147:
#line 539 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 148:
#line 544 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 149:
#line 546 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 150:
#line 551 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 151:
#line 553 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, yyvsp[-3].s, yyvsp[-1].expr, yyvsp[-4].i); ;
    break;}
case 152:
#line 555 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 153:
#line 557 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, yyvsp[-4].expr, yyvsp[-6].s, yyvsp[-1].expr); ;
    break;}
case 154:
#line 559 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, yyvsp[-4].expr, yyvsp[-6].s, yyvsp[-1].expr, yyvsp[-7].i); ;
    break;}
case 155:
#line 564 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 156:
#line 566 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 568 "cmdgram.y"


